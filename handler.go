package main

import (
	"database/sql"
	"encoding/json"
	"fmt"
	"log"
	"math/rand"
	"strconv"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

func (b *Bot) Run() {
	u := tgbotapi.NewUpdate(0)
	u.Timeout = 60
	updates := b.api.GetUpdatesChan(u)

	log.Println("ü§ñ –ë–æ—Ç –Ω–∞—á–∞–ª –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π...")

	for update := range updates {
		if update.Message != nil {
			b.handleMessage(update.Message)
		}
	}
}

func (b *Bot) handleMessage(message *tgbotapi.Message) {
	log.Printf("üì® [%s] %s", message.From.UserName, message.Text)

	user, err := b.getOrCreateUser(message)
	if err != nil {
		log.Printf("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: %v", err)
		b.sendErrorMessage(message.Chat.ID, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
		return
	}

	if message.Text == "/repeat" {
		b.handleRepeatCommand(user, message.Chat.ID)
		return
	}

	b.processAnswerAndSendResponse(user, message)
}

func (b *Bot) getOrCreateUser(message *tgbotapi.Message) (*User, error) {
	user, err := getUserByID(b.db, message.Chat.ID)
	if err != nil {
		if err == sql.ErrNoRows {
			return b.createNewUser(message)
		}
		return nil, err
	}
	return user, nil
}

func (b *Bot) createNewUser(message *tgbotapi.Message) (*User, error) {
	log.Printf("üë§ –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: %s", message.From.UserName)

	user, err := CreateUser(b.db, strconv.FormatInt(message.Chat.ID, 10), message.From.UserName)
	if err != nil {
		return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: %w", err)
	}

	if err := EnsureStatTableReady(b.db, message.Chat.ID); err != nil {
		return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: %w", err)
	}

	welcomeMsg := "üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –î–ª—è –Ω–∞—á–∞–ª–∞ –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –≤–æ–ø—Ä–æ—Å."
	questionMsg, buttons, err := b.prepareQuestion(user, message.Chat.ID)
	if err != nil {
		return nil, err
	}

	fullMessage := welcomeMsg + questionMsg
	if err := b.saveUserLastMessage(user, fullMessage); err != nil {
		log.Printf("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: %v", err)
	}

	b.sendMessageWithKeyboard(message.Chat.ID, fullMessage, buttons)
	return user, nil
}

func (b *Bot) prepareQuestion(user *User, chatID int64) (string, [][]tgbotapi.KeyboardButton, error) {
	engWords, err := GetAllEngWordByStat(b.db, chatID, WordsPerQuestion)
	if err != nil {
		return "", nil, fmt.Errorf("–æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ª–æ–≤: %w", err)
	}

	if len(engWords) == 0 {
		return "", nil, fmt.Errorf("–Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ–≤ –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞")
	}

	answerWord := b.getRandomWord(engWords)
	buttonType, answer, question, translation := b.determineQuestionType(answerWord)

	user.SetAnswer(answer)
	user.SetQuestion(question)

	if err := user.Update(b.db); err != nil {
		return "", nil, fmt.Errorf("–æ—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: %w", err)
	}

	message := fmt.Sprintf("\n‚ùì –í–æ–ø—Ä–æ—Å: %s%s", question, translation)
	buttons := b.createTelegramButtons(engWords, buttonType)

	return message, buttons, nil
}

func (b *Bot) determineQuestionType(word EngWord) (buttonType, answer, question, translation string) {
	if rand.Intn(2) == 1 {
		return "rus", word.Rus, word.Eng, " (" + word.Tran + ")"
	}
	return "eng", word.Eng, word.Rus, ""
}

func (b *Bot) handleRepeatCommand(user *User, chatID int64) {
	log.Printf("üîÑ –ü–æ–≤—Ç–æ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %s", user.GetUsername())

	buttons, err := b.parseButtons(user.GetButtons())
	if err != nil {
		log.Printf("‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫–Ω–æ–ø–æ–∫: %v", err)
		b.sendErrorMessage(chatID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã.")
		return
	}
	b.sendMessageWithKeyboard(chatID, user.GetLastMessage(), buttons)
}

func (b *Bot) processAnswerAndSendResponse(user *User, message *tgbotapi.Message) {
	rightWord, rightWordStat, err := FindEngWord(b.db, message.Chat.ID, user.GetAnswer())
	if err != nil {
		log.Printf("‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Å–ª–æ–≤–∞: %v", err)
		b.sendErrorMessage(message.Chat.ID, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Å–ª–æ–≤–∞.")
		return
	}

	response := b.buildAnswerResponse(user, message.Text, rightWord, rightWordStat, message.Chat.ID)

	nextQuestion, buttons, err := b.prepareQuestion(user, message.Chat.ID)
	if err != nil {
		log.Printf("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –≤–æ–ø—Ä–æ—Å–∞: %v", err)
		b.sendPlainMessage(message.Chat.ID, response+"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞.")
		return
	}

	fullResponse := response + nextQuestion
	log.Printf("‚ö†Ô∏è %v", fullResponse)
	if err := b.saveUserLastMessage(user, fullResponse); err != nil {
		log.Printf("‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: %v", err)
	}

	jsonButtons, _ := json.Marshal(buttons)
	user.SetButtons(string(jsonButtons))

	b.sendMessageWithKeyboard(message.Chat.ID, fullResponse, buttons)
}

func (b *Bot) buildAnswerResponse(user *User, userAnswer string, rightWord *EngWord, stat *WordStat, chatID int64) string {
	var response string

	answerTranslation := ""
	if rightWord.GetEng() == user.GetAnswer() {
		answerTranslation = " (" + rightWord.GetTran() + ")"
	}
	response += fmt.Sprintf("üí° –û—Ç–≤–µ—Ç: %s%s\n", user.GetAnswer(), answerTranslation)

	user.SetCycleCount(user.GetCycleCount() + 1)
	user.SetTotalCount(user.GetTotalCount() + 1)

	if userAnswer == user.GetAnswer() {
		response += "<b>‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!</b>\n"
		stat.SetWin(stat.GetWin() + 1)
		user.SetCycleTrue(user.GetCycleTrue() + 1)
		user.SetTotalTrue(user.GetTotalTrue() + 1)
		log.Printf("‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç %s", user.GetUsername())
	} else {
		response += "<b>‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ!</b>\n"
		b.saveWrongAnswer(user, rightWord)
		stat.SetLos(stat.GetLos() + 1)
		log.Printf("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç %s: %s (–ø—Ä–∞–≤–∏–ª—å–Ω–æ: %s)",
			user.GetUsername(), userAnswer, user.GetAnswer())
	}

	if err := rightWord.Update(b.db); err != nil {
		log.Printf("‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ª–æ–≤–∞: %v", err)
	}
	if err := stat.Update(b.db, chatID); err != nil {
		log.Printf("‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: %v", err)
	}

	response += b.buildStatistics(user, chatID)
	return response
}

func (b *Bot) saveWrongAnswer(user *User, word *EngWord) {
	key := user.GetID()
	entry := fmt.Sprintf("%s - %s", word.GetEng(), word.GetRus())

	if err := b.redisClient.ListPush(key, entry); err != nil {
		log.Printf("‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –≤ Redis: %v", err)
	}
}

func (b *Bot) buildStatistics(user *User, chatID int64) string {
	cycleRate := float64(user.GetCycleTrue()) / float64(user.GetCycleCount()) * 100
	totalRate := float64(user.GetTotalTrue()) / float64(user.GetTotalCount()) * 100

	stats := fmt.Sprintf("üìä –°–µ—Ç(%d): %.2f%%\n", user.GetCycleCount(), cycleRate)
	stats += fmt.Sprintf("üìà –í—Å–µ–≥–æ(%d): %.2f%%\n", user.GetTotalCount(), totalRate)

	if user.GetCycleCount() == CycleLength {
		stats += b.buildCycleCompletionStats(user, chatID)
		user.SetCycleCount(0)
		user.SetCycleTrue(0)
		log.Printf("üèÜ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s –∑–∞–≤–µ—Ä—à–∏–ª —Ü–∏–∫–ª", user.GetUsername())
	}

	if err := user.Update(b.db); err != nil {
		log.Printf("‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: %v", err)
	}

	return stats
}

func (b *Bot) buildCycleCompletionStats(user *User, chatID int64) string {
	stats := "\n\nüèÜ –¶–∏–∫–ª –∑–∞–≤–µ—Ä—à–µ–Ω! –†–µ–π—Ç–∏–Ω–≥:\n"

	users, err := getUsers(b.db)
	if err != nil {
		log.Printf("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: %v", err)
		return stats + "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–π—Ç–∏–Ω–≥–∞.\n"
	}

	currentUserID := strconv.FormatInt(chatID, 10)
	stats += b.buildLeaderboard(users, currentUserID, user)

	wrongAnswers, err := b.redisClient.ListGetAllAsString(user.GetID())
	if err != nil {
		log.Printf("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: %v", err)
	} else if wrongAnswers != "" {
		stats += "\nüìù –°–ª–æ–≤–∞ —Å –æ—à–∏–±–∫–∞–º–∏:\n" + wrongAnswers + "\n"
	}

	if err := b.redisClient.Delete(user.GetID()); err != nil {
		log.Printf("‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Å–ø–∏—Å–∫–∞ –æ—à–∏–±–æ–∫: %v", err)
	}

	return stats
}

func (b *Bot) buildLeaderboard(users []User, currentUserID string, currentUser *User) string {
	var leaderboard string
	place := 0
	topFive := false
	currentUserRate := float64(currentUser.GetTotalTrue()) / float64(currentUser.GetTotalCount()) * 100

	for _, usr := range users {
		place++
		if place <= 5 {
			if currentUserID == usr.GetID() {
				leaderboard += fmt.Sprintf("<b>ü•á %d. %s: %.2f%%</b>\n", place, usr.GetUsername(), currentUserRate)
				topFive = true
			} else {
				medal := b.getMedal(place)
				leaderboard += fmt.Sprintf("%s %d. %s: %.2f%%\n", medal, place, usr.GetUsername(), usr.GetTotalRate())
			}
		} else if topFive {
			break
		} else if currentUserID == usr.GetID() {
			leaderboard += "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
			leaderboard += fmt.Sprintf("<b>üìç %d. %s: %.2f%%</b>\n", place, usr.GetUsername(), usr.GetTotalRate())
			break
		}
	}

	return leaderboard
}

func (b *Bot) getMedal(place int) string {
	switch place {
	case 1:
		return "ü•á"
	case 2:
		return "ü•à"
	case 3:
		return "ü•â"
	case 4, 5:
		return "üèÖ"
	default:
		return "üìç"
	}
}
